/// SDL2 - Simple Directmedia Layer 2.
class SDL {
    /// Init library.
    func init(flags) extern "dl_sdl2.dll";

    /// Quit library.
    func quit() extern "dl_sdl2.dll";

    /// Get current error message.
    func get_error() extern "dl_sdl2.dll";

    /// Set new error message.
    func set_error(message) extern "dl_sdl2.dll";

    /// Check if a module was initialized.
    func was_init(flags) extern "dl_sdl2.dll";

    /// Init flag: everything.
    func INIT_EVERYTHING() extern "dl_sdl2.dll";


    /// Rectangle.
    class Rect extern "dl_sdl2.dll" {
        func new(x, y);
        func x(self);
        func y(self);
        func set_x(self);
        func set_y(self);
    }

    /// Event.
    class Event extern "dl_sdl2.dll" {
        var AUDIODEVICEADDED;
        var AUDIODEVICEREMOVED;
        var CONTROLLERAXISMOTION;
        var CONTROLLERBUTTONDOWN;
        var CONTROLLERBUTTONUP;
        var CONTROLLERDEVICEADDED;
        var CONTROLLERDEVICEREMOVED;
        var CONTROLLERDEVICEREMAPPED;
        var DOLLARGESTURE;
        var DOLLARRECORD;
        var DROPFILE;
        var DROPTEXT;
        var DROPBEGIN;
        var DROPCOMPLETE;
        var FINGERMOTION;
        var FINGERDOWN;
        var FINGERUP;
        var KEYDOWN;
        var KEYUP;
        var JOYAXISMOTION;
        var JOYBALLMOTION;
        var JOYHATMOTION;
        var JOYBUTTONDOWN;
        var JOYBUTTONUP;
        var JOYDEVICEADDED;
        var JOYDEVICEREMOVED;
        var MOUSEMOTION;
        var MOUSEBUTTONDOWN;
        var MOUSEBUTTONUP;
        var MOUSEWHEEL;
        var MULTIGESTURE;
        var QUIT;
        var SYSWMEVENT;
        var TEXTEDITING;
        var TEXTINPUT;
        var USEREVENT;
        var WINDOWEVENT;
    }

    /// Poll the next event.
    func poll_event(event) extern "dl_sdl2.dll";


    // Video ///////////////////////////////////////////////////

    /// Show simple message box.
    func show_simple_message_box(flags, title, message, window) extern "dl_sdl2.dll";

    /// Color.
    class Color extern "dl_sdl2.dll" {

    }

    /// Blend mode.
    class BlendMode extern "dl_sdl2.dll" {
        var NONE;
        var BLEND;
        var ADD;
        var MOD;
    }

    /// Pixel format.
    class PixelFormat extern "dl_sdl2.dll" {
        /// Map a color to a pixel in this format.
        func map_color(self, color);

        /// Map RGB to a pixel in this format.
        func map_rgb(self, r, g, b);

        /// Map RGBA to a pixel in this format.
        func map_rgba(self, r, g, b, a);

        /// Get a color from a pixel in this format.
        func get_rgb(self, pixel);

        /// Get a color from a pixel in this format.
        func get_rgba(self, pixel);
    }

    /// Window.
    class Window extern "dl_sdl2.dll" {
        /// Get flags.
        func flags(self);

        /// Get position.
        func position(self);

        /// Get size.
        func size(self);

        /// Get surface.
        func surface(self);

        /// Get title.
        func title(self);

        /// Hide this window.
        func hide();

        /// Maximize this window.
        func maximize(self);

        /// Minimize this window.
        func minimize(self);

        /// Raise this window.
        func raise(self);

        /// Restore this window.
        func restore(self);

        /// Set position.
        func set_position(self);

        /// Set size.
        func set_size(self);

        /// Set title.
        func set_title(self);

        /// Show this window.
        func show(self);

        var FULLSCREEN;
        var FULLSCREEN_DESKTOP;
        var OPENGL;
        var HIDDEN;
        var BORDERLESS;
        var RESIZABLE;
        var MINIMIZED;
        var MAXIMIZED;
        var INPUT_GRABBED;
        var ALLOW_HIGHDPI;
    }

    /// Create a window.
    func create_window(title, x, y, width, height, flags);

    /// Destory a window.
    func destroy_window(window);

    /// Surface.
    class Surface extern "dl_sdl2.dll" {
        func blit_scaled(self, rect, dst, dstrect);
        func blit_surface(self, rect, dst, dstrect);
        func clip_rect(self);
        func color_key(self);
        func alpha_mod(self);
        func blend_mode(self);
        func color_mod(self);
        func load_bmp(path);
        func save_bmp(self, path);
        func set_clip_rect(self, clip_rect);
        func set_color_key(self, color_key);
        func set_alpha_mod(self, alpha);
        func set_blend_mode(self, blend_mode);
        func set_color_mod(self, color);
        func fill_rect(self, rect, pixel_color);
        func format(self);
        func convert(self, new_format);
    }
}
